#!/usr/bin/env python3
# Copyright 2020 Alexander Wilhelmi
# This file is part of keyev.
# 
# keyev is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# keyev is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with keyev.  If not, see <http://www.gnu.org/licenses/>.
# 
# Diese Datei ist Teil von keyev.
# 
# keyev ist Freie Software: Sie können es unter den Bedingungen
# der GNU General Public License, wie von der Free Software Foundation,
# Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
# veröffentlichten Version, weiter verteilen und/oder modifizieren.
# 
# keyev wird in der Hoffnung, dass es nützlich sein wird, aber
# OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
# Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
# Siehe die GNU General Public License für weitere Details.
# 
# Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
# Programm erhalten haben. Wenn nicht, siehe <https://www.gnu.org/licenses/>.

HYSTERESIS=50

from Xlib.display import Display
from Xlib import X, XK, protocol, error
from Xlib.protocol import request
from Xlib.xobject.drawable import Pixmap
from os import environ
from sys import argv
from time import time
from Xlib.ext.xtest import fake_input
from pylib.screen_utils.env import parse_screen_layout_env_var_v2
from pylib.screen_utils.env import parse_screen_layout_env_var_v3
from pylib.screen_utils.screen_utils import get_connected_output_count_at_env_layout_index_v2
from pylib.screen_utils.screen_utils import get_connected_outputs
from pylib.screen_utils.screen_utils import env_screen_layout_2_region_layout_v2
from pylib.screen_utils.screen_utils import env_screen_layout_2_region_layout_v3
from pylib.screen_utils.screen_utils import layout2xpos_v2
from math import floor
from pprint import pprint
from pylib.du import d0,d1,dd,ptb
from pprint import pprint
from Xlib.ext import xinput as xi
import struct

debug_event=False



##################
####    v2    ####
##################
class Key_event_handler_v2():
    """
    This is a keyevent handler.
    Keyevents that come from the keyboard are processed
    here and send to the active display/x-server.
    The switching of the active display/x-server
    is done here too.
    Additionally the class can send keyevents to the windowmanagers
    running on a display to switch to a different output on that display.
    This is because one display/x-server can have multiple monitors
    attached to it.
    They are called outputs here.
    As an example the overall structure can look like this:
   
               *----------*         *----------*
               |computer_a|\       /|computer_b|
              /*----------* \     / *----------*\
             /               \___/__             \ <- monitor cable
            /                   /   \             \
    *------------* *------------* *------------* *------------*
    | monitor_0  | | monitor_1  | | monitor_2  | | monitor_3  |
    |            | |            | |            | |            |
    *------------* *------------* *------------* *------------*
          ||             ||             ||             ||

    The monitors are connected like this:
    computer_a : monitor_0 , monitor_2
    computer_b : monitor_1 , monitor_3

    On each computer runs an x-server that is called "display" here.
    The monitors are called "outputs".
    The user can switch via keybinding to a monitor.
    This works in two steps.
    Step 1 is the keyevents get redirected to the newly selected display.
    Step 2 is sending an keyevent that instructs the windowmanger running on that display
    (usually the wm is running on all the monitors attached to the display)

    This keyevent is called "output_select_keybinding" and depends
    on the configuration of the windowmanager and
    is meant to be configured by the user during initialization of this class.
    The  datastructure is a python list and the indicies are the output number. 
    The list contains lists with dictionaries inside.
    These lists are the lists of bindings.
    One dictionary represents one keyevent.
    All together it looks like this:
    [
     [{ 'keycode':55,'event_type' : X.KeyPress }, { 'keycode':55, 'event_type': X.KeyRelease},...], # output 0
     [{...},{...}], # output 1
     [{...},{...}], # output 2
     [{...},{...}], # output 3
    ]

    Argument "outputnr2displaynr_list":
    -----------------------------------
    A list that defines which display is on which output.
    The list indices are the output numbers.
    Stored in the list are the display number, that are the positions
    the displays were in the init argument list.
    """
    server_switch_state=0xC
    sw_keycodes=[24,25,26,27]
    grab_failcodes={str(X.GrabInvalidTime):"GrabInvalidTime",str(X.GrabFrozen):"GrabFrozen",str(X.GrabNotViewable):"GrabNotViewable",str(X.AlreadyGrabbed):"AlreadyGrabbed"}
    
    def __init__(self,
                 outputnr2displaynr_list,
                 home_display_string,
                 *display_strings
                 ,current_output_nr=None,
                 switch_modifier_keycodes=[105,108],
                 switch_modifer_state=0xC,
                 output_select_keybindings=None,
                 pointerid=9
                ):
        self.pointerid=pointerid
        self.display_strings=home_display_string,*display_strings
        self.current_output_nr=current_output_nr
        self.outputnr2displaynr_list=outputnr2displaynr_list
        self.displays=self._gen_displays_list()
        self.root=self.displays[0].screen().root
        #self.grab_mouse()
        self.xi_opcode=self.displays[0].display.get_extension_major('XInputExtension')
        self._register_pointer_events()
        self.screen_layout=parse_screen_layout_env_var_v3()
        self.input_area = self._calc_input_area()
        self.warp_pos = self._calc_warp_pos()
        self.switch_positions = self._calc_switching_table()
        self.switch_disable=-1
        self.switch_disable_pos=[0,0]
        self.virtual_area = self._calc_virtual_pointer_area()
        self.virt_pos  = [0,0]
        self.input_pos = [0,0]
        self.outp_nr_2_region_outp_nr=self._gen_outp_nr_2_region_outp_nr_mapping_list()
        self.outp_nr_2_home_outp_nr=self.outp_nr_2_region_outp_nr
        self.region_relative_layouts=self._gen_region_layouts()
        self.home_outputs=self.region_relative_layouts[self.display_strings[0]]
        self._interhome_warp_to(self.current_output_nr,self.virt_pos)
        servername=self.screen_layout[self.current_output_nr]['x_server']
        self.current_region_layout=self.region_relative_layouts[servername]
        self.current_display=self.displays[self.current_output_nr]
        self.current_output_root=self.current_display.screen().root

    def _gen_displays_list(self):
        displays=[]
        allready_created=[]
        for displaynr in self.outputnr2displaynr_list:
            if not displaynr in allready_created:
                displays.append(Display(self.display_strings[displaynr]))
                allready_created.append(displaynr)
            else:
                # use a display allready created
                for i in range(len(self.outputnr2displaynr_list)):
                    if self.outputnr2displaynr_list[i] == displaynr:
                        # got output_nr "i" that has the display
                        displays.append(displays[i])
                        break
        return displays

    def _gen_region_layouts(self):
        region_relative_layouts={}
        for servername in self.display_strings:
            if not servername in region_relative_layouts:
                # process region and add
                region_layout = env_screen_layout_2_region_layout_v3(self.screen_layout,x_display=servername)
                region_relative_layouts.update({servername:region_layout})
        return region_relative_layouts

    def _gen_outp_nr_2_region_outp_nr_mapping_list(self):
        """
        # output-nr to region relative output-nr mappings
        """
        outp_nr_2_region_outp_nr=[]
        processed_displays={}
        for outp_nr in range(len(self.outputnr2displaynr_list)):
            servername=self.screen_layout[outp_nr]['x_server']
            if not servername in processed_displays:
                processed_displays.update({servername:[outp_nr]})
            else:
                processed_displays[servername].append(outp_nr)
            # append the last one
            outp_nr_2_region_outp_nr.append(len(processed_displays[servername])-1)
        return outp_nr_2_region_outp_nr

    def _calc_switching_table(self):
        """
        The resulting table takes an output number.
        It gives xserver relative coordinates
        and a output number to switch to.
        """
        switch_positions = []
        
        # TODO: include checks
        l=len(self.screen_layout)

        # first switching instruction (pos,switch_to)
        output=self.screen_layout[0]
        switch_positions.append([(0,-1),(int(output['dim'][0])-1,1)])
        # middle part
        for i in range(1,l-1):
            output=self.screen_layout[i]
            switch_positions.append([(int(output['pos'][0]),i-1),(int(output['dim'][0])+int(output['pos'][0])-1,i+1)])
        # end part
        output=self.screen_layout[-1]
        switch_positions.append([(int(output['pos'][0]),l-2),(int(output['pos'][0])+int(output['dim'][0]),-1)])
        return switch_positions

    def _calc_virtual_pointer_area(self):
        l=self.screen_layout
        x_max=int(l[-1]['pos'][0])+int(l[-1]['dim'][0])-1
        y_max=int(l[-1]['pos'][1])+int(l[-1]['dim'][1])-1
        return x_max,y_max

    def _calc_input_area(self):
        """
        returns the corner points of the largest connected output
        """
        co=get_connected_outputs(x_display=self.display_strings[0])

        # start values
        x,y = (int(i) for i in (co[0]['size']))
        max_area = x*y
        max_index=0

        # get maximum area
        for i in range(len(co)):
            x,y = (int(i) for i in (co[0]['size']))
            area = x*y
            if area > max_area:
                max_area=area
                max_index=i

        # calc corner points
        x0,y0=(int(i) for i in (co[max_index]['pos']))
        xw,yw=(int(i) for i in (co[max_index]['size']))
        x1,y1=x0+xw,y0+yw
        x0+=max(round((x1-x0)*0.1),1)
        x1-=max(round((x1-x0)*0.1),1)
        y0+=max(round((y1-y0)*0.1),1)
        y1-=max(round((y1-y0)*0.1),1)
        return x0,y0,x1,y1

    def _calc_warp_pos(self):
        x0,y0,x1,y1=self.input_area
        return floor((x1-x0)/2),floor((y1-y0)/2)

    def grab_mouse(self):
        #d=self.displays[0]
        #pixmap=Pixmap(d.display,d.display.allocate_resource_id())
        #pixmap=pixmap.create_pixmap(1,1,1)
        #cursor=pixmap.create_cursor(1,(1,1,1),(0,0,0),0,0)
        #d.sync()
        #mask =  X.PointerMotionMask
        #mask |= X.ButtonPressMask
        #mask |= X.ButtonReleaseMask
        #mask |= X.ButtonMotionMask
        mask=0
        retcode=self.root.grab_pointer(True,mask,X.GrabModeAsync,X.GrabModeAsync,X.NONE,X.NONE,X.CurrentTime)
        if not retcode==0:
            self.print_grab_error(retcode)
        self.displays[0].sync()
    
    def ungrab_mouse(self):
        self.displays[0].ungrab_pointer(X.CurrentTime)
        self.displays[0].sync()
    
    def _is_display_switch(self,to_output_nr):
        o2d=self.outputnr2displaynr_list
        cur=self.current_output_nr
        return o2d[cur] != o2d[to_output_nr]

    def _outp_is_home(self,to_output_nr):
        return self.outputnr2displaynr_list[to_output_nr] == 0

    def _dsw_is_leave_home_switch(self):
        return self.outputnr2displaynr_list[self.current_output_nr] == 0
    
    def clear_keys(self,output_nr):
        for i in range(1,250):
        #for i in self.sw_keycodes+self.switch_modifier_keycodes:
            #print("clearing keys",output_nr,i)
            self.fake_input(output_nr,X.KeyRelease,detail=i,msg="clear keys")

    def fake_input(self, output_nr, event_type, detail=0,root=0,x=0,y=0,msg=""):
        try:
            #mask = X.ButtonPressMask
            #mask |= X.ButtonReleaseMask
            #mask |= X.ButtonMotionMask
            #dd(event_type)
            #if event_type & mask != 6:
            #    dd('button')
            #dd(detail)
            #dd(event_type)
            #dd(root)
            #dd(x)
            #dd(y)
            #if event_type!=6:
            #    print(x,y,detail,event_type)
            fake_input(self.displays[output_nr],event_type,detail=detail,root=root,x=x,y=y)
            self.displays[output_nr].flush()
        except struct.error as e:
            ptb(e)
            dd(event_type)
            dd(detail)
            dd(x)
            dd(y)
            

    def _is_point_in_input_area(self,pointx,pointy):
        x0,y0,x1,y1=self.input_area
        if x0 <= pointx <= x1 and y0 <= pointy <= y1:
            return True
        else:
            return False

    def _is_point_in_area(self,point,area):
        x0,y0,x1,y1=area
        if x0 <= pointx <= x1 and y0 <= pointy <= y1:
            return True
        else:
            return False
    
    def _input_warp_center(self,from_pos):
        x,y=self.warp_pos
        delta_warp_x = self.warp_pos[0] - from_pos[0]
        delta_warp_y = self.warp_pos[1] - from_pos[1]
        self.input_pos[0]+=delta_warp_x
        self.input_pos[1]+=delta_warp_y
        self.last_input_pos[0]+=delta_warp_x
        self.last_input_pos[1]+=delta_warp_y
        self.fake_input(0,X.MotionNotify,detail=0,x=x,y=y,root=self.root,msg="warp pointer")
        self.displays[0].flush()

    def _interhome_warp_to(self,outp_nr,virt_pos):
        #dd(virt_pos)
        to_pos = self._virtPos2homePos(outp_nr,virt_pos)
        #dd(to_pos)
        x,y = to_pos
        self.fake_input(0,X.MotionNotify,detail=0,x=x,y=y,msg="warp pointer")
        self.displays[0].flush()
        self._input_pos_update(x,y)

    def switch2output(self,output_nr,to_left=False):
        if self.current_output_nr==output_nr:
            # nothing to do
            return

        ## send keyevents to switch to output
        #if not self.output_select_keybindings is None:
        #    for keybind in self.output_select_keybindings[output_nr]:
        #        self.fake_input(output_nr,keybind['event_type'],detail=keybind['keycode'],msg="output switch")

        # prevent immediate backswitching
        self.switch_disable = self.current_output_nr
        self.switch_disable_pos = self.virt_pos
        
        if self._outp_is_home(output_nr):
            # warp pointer to match virt_pos
            # show pointer
            if not to_left:
                pos=self.screen_layout[output_nr]['pos'][0],self.virt_pos[1]
            else:
                pos=int(self.screen_layout[output_nr+1]['pos'][0])-1,self.virt_pos[1]
            self._interhome_warp_to(output_nr,pos)

            if not self._outp_is_home(self.current_output_nr):
                # sw from remote to home
                self.ungrab_mouse()
        else:
            if self._outp_is_home(self.current_output_nr):
                # sw from home to remote
                self.grab_mouse()

        self.current_output_nr=output_nr
        servername=self.screen_layout[output_nr]['x_server']
        self.current_region_layout=self.region_relative_layouts[servername]
        self.current_display=self.displays[output_nr]
        self.current_output_root=self.current_display.screen().root
        print("SWITCHED TO OUTPUT",output_nr)

    def _update_pointer(self):
        x=self.input_pos[0]
        y=self.input_pos[1]
        dx = x - self.last_input_pos[0]
        dy = y - self.last_input_pos[1]
        self.virt_pos[0] = max(min(self.virt_pos[0] + dx, self.virtual_area[0]),0)
        self.virt_pos[1] = max(min(self.virt_pos[1] + dy, self.virtual_area[1]),0)
        
    def _is_home(self):
        return self.outputnr2displaynr_list[self.current_output_nr]==0

    def _homePos2virtPos(self,x,y):
        hon=self.outp_nr_2_home_outp_nr[self.current_output_nr]
        opx = x-int(self.home_outputs[hon]['pos'][0])
        opy = y-int(self.home_outputs[hon]['pos'][1])
        x=int(self.screen_layout[self.current_output_nr]['pos'][0]) + opx
        y=int(self.screen_layout[self.current_output_nr]['pos'][1]) + opy
        return [x,y]

    def _virtPos2homePos(self,output_of_vpos,vpos):
        home_output=self.outp_nr_2_home_outp_nr[output_of_vpos]
        xr=vpos[0] - int(self.screen_layout[output_of_vpos]['pos'][0])
        yr=vpos[1] - int(self.screen_layout[output_of_vpos]['pos'][1])
        x=int(self.home_outputs[home_output]['pos'][0])+xr
        y=int(self.home_outputs[home_output]['pos'][1])+yr
        return x,y

    def get_remote_pos(self):
        remote_output_pos=self.current_region_layout[self.outp_nr_2_region_outp_nr[self.current_output_nr]]['pos']
        #dd(remote_output_pos)
        global_output_pos=self.screen_layout[self.current_output_nr]['pos']
        #dd(global_output_pos)
        at_output_pos_x=self.virt_pos[0]-global_output_pos[0]
        #dd(at_output_pos_x)
        at_output_pos_y=self.virt_pos[1]-global_output_pos[1]
        x=remote_output_pos[0]+at_output_pos_x
        y=remote_output_pos[1]+at_output_pos_y
        return (x,y)

    def handle_home(self,event_type,time,x=0,y=0,detail=0,metatype=None):
        """
        """
        pos=self.switch_positions[self.current_output_nr]
        x,y=self.virt_pos
        if pos[1][0] + HYSTERESIS > (x-1) >= pos[1][0]:
            sw2=pos[1][1]
            if not sw2==-1:
                self.switch2output(sw2)
        elif pos[0][0] - HYSTERESIS < (x+1) <= pos[0][0]:
            sw2=pos[0][1]
            if not sw2 == -1:
                self.switch2output(sw2)


    def handle_remote(self,event_type,time,detail=0,metatype=None):
        x=self.input_pos[0]
        y=self.input_pos[1]

        if not self._is_point_in_input_area(x,y):
            self._input_warp_center((x,y))

        pos=self.switch_positions[self.current_output_nr]
        x,y=self.virt_pos
        if  pos[0][0] - HYSTERESIS < x < pos[0][0]:
            # switch left
            sw2=pos[0][1]
            if not sw2 == -1:
                self.switch2output(sw2,to_left=True)
        elif pos[1][0] + HYSTERESIS > x > pos[1][0]:
            # switch right
            sw2=pos[1][1]
            if not sw2 == -1:
                self.switch2output(pos[1][1])

        # keyevent sending
        x,y=self.get_remote_pos()
        self.fake_input( self.current_output_nr , event_type, detail=detail , root=self.current_output_root , x=x, y=y )

    def _input_pos_update(self,x,y):
        #dd(self.current_output_nr)
        self.last_input_pos=self.input_pos
        self.input_pos=[x,y]

    def handle(self,event_type,time,x=0,y=0,detail=0,metatype=None):
        global debug_event
        
        self._input_pos_update(x,y)
        self._update_pointer()
        if self._is_home():
            self.handle_home(event_type,time,x=x,y=y,detail=detail,metatype=metatype)
        else:
            self.handle_remote(event_type,time,detail=detail,metatype=metatype)

        #dd(self.virt_pos)
        
    def print_grab_error(self,retcode):
        if retcode in [ int(i) for i in self.grab_failcodes.keys() ]:                          
            pass
            #print("failed to grab keyboard, code = "+self.grab_failcodes[str(retcode)])
        else:
            #print("failed to grab keyboard, code = "+grab_failcodes[str(retcode)])
            pass

    def _register_pointer_events(self):
        xi.XISelectEvents( self.displays[0].display,
                           opcode=self.xi_opcode,
                           window=self.root,
                           masks=[(self.pointerid,xi.ButtonReleaseMask|xi.ButtonPressMask|xi.MotionMask)])
        self.displays[0].sync()

    def _unregister_pointer_events(self):
        xi.XISelectEvents( self.displays[0].display,
                           opcode=self.xi_opcode,
                           window=self.root,
                           masks=[(self.pointerid , 0 )])
        self.displays[0].sync()

def key_events_loop_v2(handler):

    def handle_key_event(event):
        #if hasattr(event,'root_x'):
        if hasattr(event,'_data'):
            try:
                x=int(event._data['data']['root_x'])
                event_type = event._data['evtype']
            except KeyError as e:
                pass
            if not event_type in (xi.ButtonPress,xi.ButtonRelease,xi.Motion):
                dd(event)
                return
        else:
            dd(event)
            return
        if event_type in (4,5):
            print("button/press/release:",event_type)
        metatype = event.type
        detail = event._data['data']['detail']
        time = event._data['data']['time']
        y=int(event._data['data']['root_y'])
        handler.handle( event_type,time,x=x,y=y,detail=detail,metatype=metatype)

    # loop
    display=handler.displays[0]
    while True:
        event = display.next_event()
        if event is None:
            continue
        else:
            handle_key_event(event)

if __name__=="__main__":
    #d0(quiet=True)
    #display.keysym_to_keycode(XK.string_to_keysym("1"))

    kc_1 = 10
    kc_2 = 11
    kc_3 = 12
    kc_4 = 13
   # kc_q = 24
   # kc_w = 25
   # kc_e = 26
   # kc_r = 27
    kc_rctrl = 105
    kc_ralt  = 108

    output_0_keybindings=[
            { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
            { 'keycode':kc_1,     'event_type' : X.KeyPress   },
            { 'keycode':kc_1,     'event_type' : X.KeyRelease   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
            { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                         ]  
    output_2_keybindings=[
            { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
            { 'keycode':kc_3,     'event_type' : X.KeyPress   },
            { 'keycode':kc_3,     'event_type' : X.KeyRelease   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
            { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                         ] 

    output_1_keybindings=[
            { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
            { 'keycode':kc_2,     'event_type' : X.KeyPress   },
            { 'keycode':kc_2,     'event_type' : X.KeyRelease   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
            { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                         ]  
    output_3_keybindings=[
            { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
            { 'keycode':kc_4,     'event_type' : X.KeyPress   },
            { 'keycode':kc_4,     'event_type' : X.KeyRelease   },
            { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
            { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                         ]  
    output_select_keybindings = [output_0_keybindings,output_1_keybindings,output_2_keybindings,output_3_keybindings]
    
    key_events_loop_v2( Key_event_handler_v2(
                                                [0,1,0,1],
                                                "esadc:0",
                                                "skyscraper:0",
                                                current_output_nr=0,
                                                output_select_keybindings=output_select_keybindings
                                            ))

# vim: set foldmethod=indent foldlevel=1 foldnestmax=2 :
