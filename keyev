#!/usr/bin/env python3

from Xlib.display import Display
from Xlib import X, XK, protocol, error
from os import environ
from sys import argv
from time import time
from Xlib.ext.xtest import fake_input


display=Display()
screen=display.screen()
root=screen.root

class Key_event_handler():
    formatstring="{:>15s}  {:3n} 0x{:02X}   {:0.9f} {:s}"
    server_switch_state=0xC
    sw_keycodes=[24,25,26,27]
    grab_failcodes={str(X.GrabInvalidTime):"GrabInvalidTime",str(X.GrabFrozen):"GrabFrozen",str(X.GrabNotViewable):"GrabNotViewable",str(X.AlreadyGrabbed):"AlreadyGrabbed"}
    
    def __init__(self,target_display):
        self.key_state=[(0,None)]*1000
        self.target_display=Display(target_display)
        self.screen=self.target_display.screen()
        self.root=self.screen.root
        self.current_screen=None

        # ungrab the target
        self.target_display.ungrab_keyboard(X.CurrentTime)

    def switch2screen(self,num):
        pass


    def handle(self,keyeventcode,keycode,state,time):
        if self.current_screen in (1,3):
            fake_input(self.target_display,keyeventcode,detail=keycode)
            self.target_display.flush()
            print("done fake input",self.target_display.display.display_name,keyeventcode,keycode)
        if keyeventcode == X.KeyPress:
            if self.key_state[keycode][1] in (0,None):
                self.key_state[keycode] = (time,1)
                print(self.formatstring.format("key pressed",keycode,state,0,""))
            else:
                print(self.formatstring.format("key pressed",keycode,state,0,"(was unreleased)"))
        elif keyeventcode == X.KeyRelease:
            if self.key_state[keycode][1] == 1:
                delta_t = (time-self.key_state[keycode][0])
                print(self.formatstring.format("key released",keycode,state,delta_t,""))
                if keycode in (self.sw_keycodes[1],self.sw_keycodes[3]) and self.key_state[105][1]==1 and self.key_state[108][1]==1:

                    if self.current_screen in [0,2,None]:
                        #window=self.display.get_input_focus()._data['focus']
                        #print(window)
                        retcode=root.grab_keyboard(True,X.GrabModeSync,X.GrabModeSync,X.CurrentTime)
                        if retcode==0:
                            print("keyboard grabbed")
                            self.current_screen=self.sw_keycodes.index(keycode)
                        else:
                            if retcode in [ int(i) for i in self.grab_failcodes.keys() ]:                          
                                print("failed to grab keyboard, code = "+self.grab_failcodes[str(retcode)])
                            else:
                                print("failed to grab keyboard, code = "+grab_failcodes[str(retcode)])
                elif keycode in (self.sw_keycodes[0],self.sw_keycodes[2]) and self.key_state[105][1]==1 and self.key_state[108][1]==1:
                    if self.current_screen in [1,3,None]:
                        display.ungrab_keyboard(X.CurrentTime)
                        print("keyboard ungrabbed")
                        self.current_screen=self.sw_keycodes.index(keycode)
            else:
                print(self.formatstring.format("key released",keycode,state,0,"(was unpressed)"))
            self.key_state[keycode] = (0,0)

class Key_event_handler_v2():
    formatstring="{:>15s}  {:3n} 0x{:02X}   {:0.9f} {:s}"
    server_switch_state=0xC
    sw_keycodes=[24,25,26,27]
    grab_failcodes={str(X.GrabInvalidTime):"GrabInvalidTime",str(X.GrabFrozen):"GrabFrozen",str(X.GrabNotViewable):"GrabNotViewable",str(X.AlreadyGrabbed):"AlreadyGrabbed"}
    
    def __init__(self,target_display):
        self.key_state=[(0,None)]*1000
        self.target_display=Display(target_display)
        self.screen=self.target_display.screen()
        self.root=self.screen.root
        self.current_screen=None

        # ungrab the target
        self.target_display.ungrab_keyboard(X.CurrentTime)

    def switch2screen(self,num):
        pass


    def handle(self,keyeventcode,keycode,state,time):
        if self.current_screen in (1,3):
            fake_input(self.target_display,keyeventcode,detail=keycode)
            self.target_display.flush()
            print("done fake input",self.target_display.display.display_name,keyeventcode,keycode)
        if keyeventcode == X.KeyPress:
            if self.key_state[keycode][1] in (0,None):
                self.key_state[keycode] = (time,1)
                print(self.formatstring.format("key pressed",keycode,state,0,""))
            else:
                print(self.formatstring.format("key pressed",keycode,state,0,"(was unreleased)"))
        elif keyeventcode == X.KeyRelease:
            if self.key_state[keycode][1] == 1:
                delta_t = (time-self.key_state[keycode][0])
                print(self.formatstring.format("key released",keycode,state,delta_t,""))
                if keycode in (self.sw_keycodes[1],self.sw_keycodes[3]) and self.key_state[105][1]==1 and self.key_state[108][1]==1:

                    if self.current_screen in [0,2,None]:
                        #window=self.display.get_input_focus()._data['focus']
                        #print(window)
                        #retcode=root.grab_keyboard(True,X.GrabModeSync,X.GrabModeSync,X.CurrentTime)
                        if retcode==0:
                            print("keyboard grabbed")
                            self.current_screen=self.sw_keycodes.index(keycode)
                        else:
                            if retcode in [ int(i) for i in self.grab_failcodes.keys() ]:                          
                                print("failed to grab keyboard, code = "+self.grab_failcodes[str(retcode)])
                            else:
                                print("failed to grab keyboard, code = "+grab_failcodes[str(retcode)])
                elif keycode in (self.sw_keycodes[0],self.sw_keycodes[2]) and self.key_state[105][1]==1 and self.key_state[108][1]==1:
                    if self.current_screen in [1,3,None]:
                        #display.ungrab_keyboard(X.CurrentTime)
                        print("keyboard ungrabbed")
                        self.current_screen=self.sw_keycodes.index(keycode)
            else:
                print(self.formatstring.format("key released",keycode,state,0,"(was unpressed)"))
            self.key_state[keycode] = (0,0)

def key_events_loop(x_server,handler):
    display=Display(x_server)
    from Xlib.protocol import rq
    from Xlib.ext.record import create_context,AllClients,enable_context,free_context

    record_ranges = [{
                        'core_requests': (0, 0),
                        'core_replies': (0, 0),
                        'ext_requests': (0, 0, 0, 0),
                        'ext_replies': (0, 0, 0, 0),
                        'delivered_events': (0, 0),
                        'device_events': (X.KeyReleaseMask, X.ButtonReleaseMask),
                        'errors': (0, 0),
                        'client_started': False,
                        'client_died': False,
                    }]

    def handle_key_event(reply):
        data = reply.data
        while len(data):
            event, data = rq.EventField(None).parse_binary_value(data, display.display, None, None)
            keyeventcode = event.type
            keycode = event.detail
            time = event.time
            keystatecode=event.state
            keymaskcode="unknown yet"
            handler.handle( keyeventcode, keycode, keystatecode , time)

    context = create_context(display,0,[AllClients],record_ranges)
    enable_context(display,context,handle_key_event)
    free_context(display)
    
    #window.change_attributes(event_mask = X.KeyPressMask|X.KeyReleaseMask)

    # loop
    while True:
        event = display.next_event()
        if event is None or not hasattr(event, 'detail'):
            continue
        else:
            print("ERROR")
            print(event)

def key_events_loop_v2(x_server,handler):
    display=Display(x_server)
    from Xlib.protocol import rq
    window=display.get_input_focus()._data['focus']
    window.grab_key(25,12,True,X.GrabModeSync,X.GrabModeSync)
    window.grab_key(27,12,True,X.GrabModeSync,X.GrabModeSync)

    def handle_key_event(reply):
        data = reply.data
        while len(data):
            event, data = rq.EventField(None).parse_binary_value(data, display.display, None, None)
            keyeventcode = event.type
            keycode = event.detail
            time = event.time
            keystatecode=event.state
            keymaskcode="unknown yet"
            handler.handle( keyeventcode, keycode, keystatecode , time)

    # loop
    while True:
        event = display.next_event()
        if event is None or not hasattr(event, 'detail'):
            continue
        else:
            print("ERROR")
            print(event)

if __name__=="__main__":
    #key_events_loop("esadc:0",Key_event_handler("skyscraper:0"))
    key_events_loop_v2("esadc:0",Key_event_handler_v2("skyscraper:0"))

# vim: set foldmethod=indent foldlevel=0 foldnestmax=1 :
