#!/usr/bin/env python3
# Copyright 2020 Alexander Wilhelmi
# This file is part of keyev.
# 
# keyev is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# keyev is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with keyev.  If not, see <http://www.gnu.org/licenses/>.
# 
# Diese Datei ist Teil von keyev.
# 
# keyev ist Freie Software: Sie können es unter den Bedingungen
# der GNU General Public License, wie von der Free Software Foundation,
# Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
# veröffentlichten Version, weiter verteilen und/oder modifizieren.
# 
# keyev wird in der Hoffnung, dass es nützlich sein wird, aber
# OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
# Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
# Siehe die GNU General Public License für weitere Details.
# 
# Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
# Programm erhalten haben. Wenn nicht, siehe <https://www.gnu.org/licenses/>.
import sys
sys.path.insert(0,"/var/src/pylib")
from pylib.syslog_utils import warn,err,info,log,WARN,ERR,INFO,warn_exp,debug
from pylib.screen_utils.screen_utils import layout2displaynr
from pylib.screen_utils.env import parse_screen_layout_env_var_v3
from pylib.screen_utils.env import parse_display_var_v3
from pylib.screen_utils     import get_current_output_index
from re import sub
from argparse import ArgumentParser

try:
    from Xlib.display import Display
    from Xlib import X, XK, protocol, error
    from os import environ
    from sys import argv
    from time import time
    from Xlib.ext.xtest import fake_input
    from socket import gethostname
    
    
    ##################
    ####    v2    ####
    ##################
    class Key_event_handler_v2():
        """
        This is a keyevent handler.
        Keyevents that come from the keyboard are processed
        here and send to the active display/x-server.
        The switching of the active display/x-server
        is done here too.
        Additionally the class can send keyevents to the windowmanagers
        running on a display to switch to a different output on that display.
        This is because one display/x-server can have multiple monitors
        attached to it.
        They are called outputs here.
        As an example the overall structure can look like this:
       
                   *----------*         *----------*
                   |computer_a|\       /|computer_b|
                  /*----------* \     / *----------*\
                 /               \___/__             \ <- monitor cable
                /                   /   \             \
        *------------* *------------* *------------* *------------*
        | monitor_0  | | monitor_1  | | monitor_2  | | monitor_3  |
        |            | |            | |            | |            |
        *------------* *------------* *------------* *------------*
              ||             ||             ||             ||
    
        The monitors are connected like this:
        computer_a : monitor_0 , monitor_2
        computer_b : monitor_1 , monitor_3
    
        On each computer runs an x-server that is called "display" here.
        The monitors are called "outputs".
        The user can switch via keybinding to a monitor.
        This works in two steps.
        Step 1 is the keyevents get redirected to the newly selected display.
        Step 2 is sending an keyevent that instructs the windowmanger running on that display
        (usually the wm is running on all the monitors attached to the display)
    
        This keyevent is called "output_select_keybinding" and depends
        on the configuration of the windowmanager and
        is meant to be configured by the user during initialization of this class.
        The  datastructure is a python list and the indicies are the output number. 
        The list contains lists with dictionaries inside.
        These lists are the lists of bindings.
        One dictionary represents one keyevent.
        All together it looks like this:
        [
         [{ 'keycode':55,'event_type' : X.KeyPress }, { 'keycode':55, 'event_type': X.KeyRelease},...], # output 0
         [{...},{...}], # output 1
         [{...},{...}], # output 2
         [{...},{...}], # output 3
        ]
    
        Argument "outputnr2displaynr_list":
        -----------------------------------
        A list that defines which display is on which output.
        The list indices are the output numbers.
        Stored in the list are the display number, that are the positions
        the displays were in the init argument list.
        """
        server_switch_state=0xC
        sw_keycodes=[24,25,26,27]
        grab_failcodes={str(X.GrabInvalidTime):"GrabInvalidTime",str(X.GrabFrozen):"GrabFrozen",str(X.GrabNotViewable):"GrabNotViewable",str(X.AlreadyGrabbed):"AlreadyGrabbed"}
        
        def __init__(self,
                     outputnr2displaynr_list,
                     *display_strings,
                     current_output_nr,
                     home_xdisplay_index, 
                     switch_modifier_keycodes = [105,108],
                     switch_modifer_state = 0xC,
                     output_select_keybindings = None,
                     debug = False,
                    ):
            ####################################
            ###   debug: checking all args   ###
            ####################################
            if debug:
                from pylib.du import dd
                dd(outputnr2displaynr_list)
                dd(display_strings)
                dd(current_output_nr)
                dd(home_xdisplay_index)
                #dd(switch_modifier_keycodes)
                dd(switch_modifier_keycodes)
                dd(switch_modifer_state)
                dd(debug)

            ########################
            ##   setup displays   ##
            ########################
            # Key event handler needs displays to send keyevents to.
            # home_display is the x-display/x-server with the keyboard attached.
            self.display_strings = display_strings
            self.displays = []
            allready_created= []
            for displaynr in outputnr2displaynr_list:
                if not displaynr in allready_created:
                    display_string = self.display_strings[displaynr]
                    try:
                        to_append = Display(display_string)
                    except TypeError:
                        print("\""+display_string+"\"")
                        print(Display)
                        raise
                    self.displays.append(to_append)
                    allready_created.append(displaynr)
                else:
                    # use a display allready created
                    for i in range(len(outputnr2displaynr_list)):
                        if outputnr2displaynr_list[i] == displaynr:
                            # got output_nr "i" that has the display
                            self.displays.append(self.displays[i])
                            break
            if debug:
                dd(self.display_strings)

            #######################
            ## setup sw keycodes ##
            #######################
            remove_left = True
            while len(outputnr2displaynr_list) < len(self.sw_keycodes) :
                if remove_left:
                    self.sw_keycodes = self.sw_keycodes[1:]
                    remove_left = False
                else:
                    self.sw_keycodes = self.sw_keycodes[:-1]
                    remove_left = True
            if debug:
                print(f"sw_keycodes = {self.sw_keycodes}")

            #################################
            ###   setup the other stuff   ###
            #################################
            # this list defines what display is on what output
            # list indices are the output numbers
            # stored in the list are the display number, as
            # it was in the init argument list
            self.outputnr2displaynr_list=outputnr2displaynr_list
            self.current_output_nr = current_output_nr
            self.switch_modifer_state=switch_modifer_state
            self.switch_modifier_keycodes=switch_modifier_keycodes
            self.home_xdisplay_index = home_xdisplay_index
            self.output_select_keybindings=output_select_keybindings
            self.debug = debug
            # set root
            self.root=self.displays[self.home_xdisplay_index].screen().root
            self.grab_switch_keys()

    
        def grab_switch_keys(self):
            for i in range(len(self.outputnr2displaynr_list)):
                #if self.outputnr2displaynr_list[i] != self.home_xdisplay_index:
                if True:
                    #if self.debug:
                        #print(f"grabbing sw key: index={i}, keycode={self.sw_keycodes[i]}")
                        #print(dir(self.root.display))
                    self.root.grab_key(self.sw_keycodes[i],self.switch_modifer_state,True,X.GrabModeAsync,X.GrabModeAsync,X.CurrentTime)
                else:
                    pass
                    #if self.debug:
                    #    print(f"not grabbing sw key: index={i}, keycode={self.sw_keycodes[i]}")


        def grab_keyboard(self):
            retcode=self.root.grab_keyboard(False,X.GrabModeAsync,X.GrabModeAsync,X.CurrentTime)
            if not retcode==0:
                self.print_grab_error(retcode)
            self.displays[0].sync()
            #if self.debug:
                #print("grabbed keyboard")
        
        def _is_display_switch(self,to_output_nr):
            o2d=self.outputnr2displaynr_list
            cur=self.current_output_nr
            return o2d[cur] != o2d[to_output_nr]
    
        def _dsw_is_home_switch(self,to_output_nr):
            return self.outputnr2displaynr_list[to_output_nr] == self.home_xdisplay_index
    
        def _dsw_is_leave_home_switch(self):
            return self.outputnr2displaynr_list[self.current_output_nr] == self.home_xdisplay_index
        
        def clear_keys(self,output_nr):
            for i in range(1,250):
            #for i in self.sw_keycodes+self.switch_modifier_keycodes:
                #print("clearing keys",output_nr,i)
                self.fake_input(output_nr,X.KeyRelease,detail=i,msg="clear keys")
    
        def fake_input(self, output_nr, event_type,detail=None,print=True,msg=""):
            fake_input(self.displays[output_nr],event_type,detail=detail)
            self.print(event_type,detail,self.outputnr2displaynr_list[output_nr],msg)
    
        def switch2output(self,output_nr):
            # if self.current_output_nr == output_nr :
            # do not return because it self.current_output_nr
            # may not be the output that is activated by
            # the windowmanager or some similar program
    
            if self._is_display_switch(output_nr):
                #print("is dsp sw")
                if self._dsw_is_home_switch(output_nr):
                    self.displays[self.home_xdisplay_index].ungrab_keyboard(time=X.CurrentTime)
                    self.displays[self.home_xdisplay_index].sync()
                    #print("ungrabbed keyboard")
                    self.grab_switch_keys()
                elif self._dsw_is_leave_home_switch():
                    self.grab_keyboard()
    
            # send keyevents to switch to output
            if not self.output_select_keybindings is None:
                for keybind in self.output_select_keybindings[output_nr]:
                    self.fake_input(output_nr,keybind['event_type'],detail=keybind['keycode'],msg="output switch")
    
            self.current_output_nr=output_nr

        def is_sw_state(self,state):
            """
            Tells whether the modifer state is the state that is for switching.
            Modifiers are keys like strg,alt,...
            Switching means to change to another output/monitor
            (a device connected with a separate cable).
            """
            return state&self.switch_modifer_state==self.switch_modifer_state

        def handle(self,keyeventcode,keycode,state,time):
            if self.is_sw_state(state) and keycode in self.sw_keycodes:
                if keyeventcode==X.KeyRelease:
                    self.switch2output(self.sw_keycodes.index(keycode))
                else:
                    pass
            else:
                self.fake_input(self.current_output_nr,keyeventcode,detail=keycode,msg="handle")
                self.displays[self.current_output_nr].flush()
    
        def print(self,keyeventcode,keycode,target_display,msg):
            if not self.debug:
                return
            formatstring="{:<5n} {:>15s} {:3n} {:s}"
            if keyeventcode == X.KeyPress:
                m0="KeyPress"
            else:
                m0="KeyRelease"
            debug(formatstring.format(target_display,m0,keycode,msg))
    
        def print_grab_error(self,retcode):
            if retcode in [ int(i) for i in self.grab_failcodes.keys() ]:                          
                pass
                #print("failed to grab keyboard, code = "+self.grab_failcodes[str(retcode)])
            else:
                #print("failed to grab keyboard, code = "+grab_failcodes[str(retcode)])
                pass
    
    
    def key_events_loop_v2(handler):
    
        def handle_key_event(event):
            keyeventcode = event.type
            keycode = event.detail
            time = event.time
            keystatecode=event.state
            handler.handle( keyeventcode, keycode, keystatecode , time)
    
        # loop
        display = handler.displays[handler.home_xdisplay_index]
        while True:
            event = display.next_event()
            if event is None or not hasattr(event, 'detail'):
                continue
            else:
                handle_key_event(event)
    
    if __name__=="__main__":

        screen_layout = parse_screen_layout_env_var_v3()
        display_strings = [i['x_server'] for i in screen_layout]
        home_xdisplay_index = display_strings.index(parse_display_var_v3())
        layout2displaynrlist=layout2displaynr(layout=screen_layout)

        #display.keysym_to_keycode(XK.string_to_keysym("1"))
        ap=ArgumentParser()
        ap.add_argument ("-i","--current-output-index",type=int,
                        default = get_current_output_index  (
                                                            layout = screen_layout,
                                                            layout2displaynrlist = layout2displaynrlist
                                                            )
                        )
        ap.add_argument( "-d", "--debug", action="store_true" )
        args=ap.parse_args()
    
        kc_1 = 10
        kc_2 = 11
        kc_3 = 12
        kc_4 = 13

       #  The following 4(commented)/2 ones are
       #  the codes that are send by the user to
       #  the "home-xserver" what causes further
       #  actions to happen.

       # kc_q = 24
       # kc_w = 25
       # kc_e = 26
       # kc_r = 27

        kc_rctrl = 105
        kc_ralt  = 108
    

        # The following keycodes will be send to the Xserver that
        # they belong to. The windowmanager running there
        # will handle them.

        output_0_keybindings=[
                { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
                { 'keycode':kc_1,     'event_type' : X.KeyPress   },
                { 'keycode':kc_1,     'event_type' : X.KeyRelease   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
                { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                             ]  
        output_1_keybindings=[
                { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
                { 'keycode':kc_2,     'event_type' : X.KeyPress   },
                { 'keycode':kc_2,     'event_type' : X.KeyRelease   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
                { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                             ]  
        output_2_keybindings=[
                { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
                { 'keycode':kc_3,     'event_type' : X.KeyPress   },
                { 'keycode':kc_3,     'event_type' : X.KeyRelease   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
                { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                             ] 
        output_3_keybindings=[
                { 'keycode':kc_rctrl, 'event_type' : X.KeyPress   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyPress   },
                { 'keycode':kc_4,     'event_type' : X.KeyPress   },
                { 'keycode':kc_4,     'event_type' : X.KeyRelease   },
                { 'keycode':kc_ralt,  'event_type' : X.KeyRelease   },
                { 'keycode':kc_rctrl, 'event_type' : X.KeyRelease   },
                             ]  
        output_select_keybindings = [output_0_keybindings,output_1_keybindings,output_2_keybindings,output_3_keybindings]

        
        key_events_loop_v2( Key_event_handler_v2(
                                                    layout2displaynrlist,
                                                    *display_strings,
                                                    current_output_nr = args.current_output_index,
                                                    home_xdisplay_index = home_xdisplay_index,
                                                    output_select_keybindings = output_select_keybindings,
                                                    debug = args.debug,
                                                ))
    
except Exception as e:
    warn_exp(e,with_traceback=True)
    if args.debug:
        raise

# vim: set foldmethod=indent foldlevel=1 foldnestmax=3 :
